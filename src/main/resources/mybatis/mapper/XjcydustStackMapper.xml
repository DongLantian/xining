<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nankai.xining.repository.XjcydustStackMapper">
  <resultMap id="BaseResultMap" type="com.nankai.xining.bean.XjcydustStack">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="com_id" jdbcType="INTEGER" property="comId" />
    <result column="stack_id" jdbcType="INTEGER" property="stackId" />
    <result column="year" jdbcType="CHAR" property="year" />
    <result column="sarea" jdbcType="INTEGER" property="sarea" />
    <result column="material_type" jdbcType="VARCHAR" property="materialType" />
    <result column="windf_thresh" jdbcType="DOUBLE" property="windfThresh" />
    <result column="wind_friction" jdbcType="DOUBLE" property="windFriction" />
    <result column="ground_rough" jdbcType="DOUBLE" property="groundRough" />
    <result column="material_rough" jdbcType="DOUBLE" property="materialRough" />
    <result column="ground_windhigh" jdbcType="DOUBLE" property="groundWindhigh" />
    <result column="m_windnum" jdbcType="INTEGER" property="mWindnum" />
    <result column="ground_wind" jdbcType="DOUBLE" property="groundWind" />
    <result column="controlname" jdbcType="VARCHAR" property="controlname" />
    <result column="scccode" jdbcType="CHAR" property="scccode" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
    <result column="pm25_emission" jdbcType="DOUBLE" property="pm25Emission" />
    <result column="pm10_emission" jdbcType="DOUBLE" property="pm10Emission" />
    <result column="voc_emission" jdbcType="DOUBLE" property="vocEmission" />
    <result column="nh3_emission" jdbcType="DOUBLE" property="nh3Emission" />
    <result column="so2_emission" jdbcType="DOUBLE" property="so2Emission" />
    <result column="co_emission" jdbcType="DOUBLE" property="coEmission" />
    <result column="oc_emission" jdbcType="DOUBLE" property="ocEmission" />
    <result column="bc_emission" jdbcType="DOUBLE" property="bcEmission" />
    <result column="nox_emission" jdbcType="DOUBLE" property="noxEmission" />
    <result column="pm25_max" jdbcType="DOUBLE" property="pm25Max" />
    <result column="pm10_max" jdbcType="DOUBLE" property="pm10Max" />
    <result column="voc_max" jdbcType="DOUBLE" property="vocMax" />
    <result column="nh3_max" jdbcType="DOUBLE" property="nh3Max" />
    <result column="so2_max" jdbcType="DOUBLE" property="so2Max" />
    <result column="co_max" jdbcType="DOUBLE" property="coMax" />
    <result column="oc_max" jdbcType="DOUBLE" property="ocMax" />
    <result column="bc_max" jdbcType="DOUBLE" property="bcMax" />
    <result column="nox_max" jdbcType="DOUBLE" property="noxMax" />
    <result column="pm25_unit" jdbcType="CHAR" property="pm25Unit" />
    <result column="pm10_unit" jdbcType="CHAR" property="pm10Unit" />
    <result column="voc_unit" jdbcType="CHAR" property="vocUnit" />
    <result column="nh3_unit" jdbcType="CHAR" property="nh3Unit" />
    <result column="so2_unit" jdbcType="CHAR" property="so2Unit" />
    <result column="co_unit" jdbcType="CHAR" property="coUnit" />
    <result column="oc_unit" jdbcType="CHAR" property="ocUnit" />
    <result column="bc_unit" jdbcType="CHAR" property="bcUnit" />
    <result column="nox_unit" jdbcType="CHAR" property="noxUnit" />
    <result column="scc_describe" jdbcType="VARCHAR" property="sccDescribe" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, com_id, stack_id, year, sarea, material_type, windf_thresh, wind_friction, ground_rough, 
    material_rough, ground_windhigh, m_windnum, ground_wind, controlname, scccode, flag, 
    pm25_emission, pm10_emission, voc_emission, nh3_emission, so2_emission, co_emission, 
    oc_emission, bc_emission, nox_emission, pm25_max, pm10_max, voc_max, nh3_max, so2_max, 
    co_max, oc_max, bc_max, nox_max, pm25_unit, pm10_unit, voc_unit, nh3_unit, so2_unit, 
    co_unit, oc_unit, bc_unit, nox_unit, scc_describe
  </sql>
  <select id="selectByExample" parameterType="com.nankai.xining.bean.XjcydustStackExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from xjcydust_stack
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from xjcydust_stack
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from xjcydust_stack
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.nankai.xining.bean.XjcydustStackExample">
    delete from xjcydust_stack
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nankai.xining.bean.XjcydustStack">
    insert into xjcydust_stack (id, com_id, stack_id, 
      year, sarea, material_type, 
      windf_thresh, wind_friction, ground_rough, 
      material_rough, ground_windhigh, m_windnum, 
      ground_wind, controlname, scccode, 
      flag, pm25_emission, pm10_emission, 
      voc_emission, nh3_emission, so2_emission, 
      co_emission, oc_emission, bc_emission, 
      nox_emission, pm25_max, pm10_max, 
      voc_max, nh3_max, so2_max, 
      co_max, oc_max, bc_max, nox_max, 
      pm25_unit, pm10_unit, voc_unit, 
      nh3_unit, so2_unit, co_unit, oc_unit, 
      bc_unit, nox_unit, scc_describe
      )
    values (#{id,jdbcType=INTEGER}, #{comId,jdbcType=INTEGER}, #{stackId,jdbcType=INTEGER}, 
      #{year,jdbcType=CHAR}, #{sarea,jdbcType=INTEGER}, #{materialType,jdbcType=VARCHAR}, 
      #{windfThresh,jdbcType=DOUBLE}, #{windFriction,jdbcType=DOUBLE}, #{groundRough,jdbcType=DOUBLE}, 
      #{materialRough,jdbcType=DOUBLE}, #{groundWindhigh,jdbcType=DOUBLE}, #{mWindnum,jdbcType=INTEGER}, 
      #{groundWind,jdbcType=DOUBLE}, #{controlname,jdbcType=VARCHAR}, #{scccode,jdbcType=CHAR}, 
      #{flag,jdbcType=INTEGER}, #{pm25Emission,jdbcType=DOUBLE}, #{pm10Emission,jdbcType=DOUBLE}, 
      #{vocEmission,jdbcType=DOUBLE}, #{nh3Emission,jdbcType=DOUBLE}, #{so2Emission,jdbcType=DOUBLE}, 
      #{coEmission,jdbcType=DOUBLE}, #{ocEmission,jdbcType=DOUBLE}, #{bcEmission,jdbcType=DOUBLE}, 
      #{noxEmission,jdbcType=DOUBLE}, #{pm25Max,jdbcType=DOUBLE}, #{pm10Max,jdbcType=DOUBLE}, 
      #{vocMax,jdbcType=DOUBLE}, #{nh3Max,jdbcType=DOUBLE}, #{so2Max,jdbcType=DOUBLE}, 
      #{coMax,jdbcType=DOUBLE}, #{ocMax,jdbcType=DOUBLE}, #{bcMax,jdbcType=DOUBLE}, #{noxMax,jdbcType=DOUBLE}, 
      #{pm25Unit,jdbcType=CHAR}, #{pm10Unit,jdbcType=CHAR}, #{vocUnit,jdbcType=CHAR}, 
      #{nh3Unit,jdbcType=CHAR}, #{so2Unit,jdbcType=CHAR}, #{coUnit,jdbcType=CHAR}, #{ocUnit,jdbcType=CHAR}, 
      #{bcUnit,jdbcType=CHAR}, #{noxUnit,jdbcType=CHAR}, #{sccDescribe,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nankai.xining.bean.XjcydustStack">
    insert into xjcydust_stack
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="comId != null">
        com_id,
      </if>
      <if test="stackId != null">
        stack_id,
      </if>
      <if test="year != null">
        year,
      </if>
      <if test="sarea != null">
        sarea,
      </if>
      <if test="materialType != null">
        material_type,
      </if>
      <if test="windfThresh != null">
        windf_thresh,
      </if>
      <if test="windFriction != null">
        wind_friction,
      </if>
      <if test="groundRough != null">
        ground_rough,
      </if>
      <if test="materialRough != null">
        material_rough,
      </if>
      <if test="groundWindhigh != null">
        ground_windhigh,
      </if>
      <if test="mWindnum != null">
        m_windnum,
      </if>
      <if test="groundWind != null">
        ground_wind,
      </if>
      <if test="controlname != null">
        controlname,
      </if>
      <if test="scccode != null">
        scccode,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="pm25Emission != null">
        pm25_emission,
      </if>
      <if test="pm10Emission != null">
        pm10_emission,
      </if>
      <if test="vocEmission != null">
        voc_emission,
      </if>
      <if test="nh3Emission != null">
        nh3_emission,
      </if>
      <if test="so2Emission != null">
        so2_emission,
      </if>
      <if test="coEmission != null">
        co_emission,
      </if>
      <if test="ocEmission != null">
        oc_emission,
      </if>
      <if test="bcEmission != null">
        bc_emission,
      </if>
      <if test="noxEmission != null">
        nox_emission,
      </if>
      <if test="pm25Max != null">
        pm25_max,
      </if>
      <if test="pm10Max != null">
        pm10_max,
      </if>
      <if test="vocMax != null">
        voc_max,
      </if>
      <if test="nh3Max != null">
        nh3_max,
      </if>
      <if test="so2Max != null">
        so2_max,
      </if>
      <if test="coMax != null">
        co_max,
      </if>
      <if test="ocMax != null">
        oc_max,
      </if>
      <if test="bcMax != null">
        bc_max,
      </if>
      <if test="noxMax != null">
        nox_max,
      </if>
      <if test="pm25Unit != null">
        pm25_unit,
      </if>
      <if test="pm10Unit != null">
        pm10_unit,
      </if>
      <if test="vocUnit != null">
        voc_unit,
      </if>
      <if test="nh3Unit != null">
        nh3_unit,
      </if>
      <if test="so2Unit != null">
        so2_unit,
      </if>
      <if test="coUnit != null">
        co_unit,
      </if>
      <if test="ocUnit != null">
        oc_unit,
      </if>
      <if test="bcUnit != null">
        bc_unit,
      </if>
      <if test="noxUnit != null">
        nox_unit,
      </if>
      <if test="sccDescribe != null">
        scc_describe,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="comId != null">
        #{comId,jdbcType=INTEGER},
      </if>
      <if test="stackId != null">
        #{stackId,jdbcType=INTEGER},
      </if>
      <if test="year != null">
        #{year,jdbcType=CHAR},
      </if>
      <if test="sarea != null">
        #{sarea,jdbcType=INTEGER},
      </if>
      <if test="materialType != null">
        #{materialType,jdbcType=VARCHAR},
      </if>
      <if test="windfThresh != null">
        #{windfThresh,jdbcType=DOUBLE},
      </if>
      <if test="windFriction != null">
        #{windFriction,jdbcType=DOUBLE},
      </if>
      <if test="groundRough != null">
        #{groundRough,jdbcType=DOUBLE},
      </if>
      <if test="materialRough != null">
        #{materialRough,jdbcType=DOUBLE},
      </if>
      <if test="groundWindhigh != null">
        #{groundWindhigh,jdbcType=DOUBLE},
      </if>
      <if test="mWindnum != null">
        #{mWindnum,jdbcType=INTEGER},
      </if>
      <if test="groundWind != null">
        #{groundWind,jdbcType=DOUBLE},
      </if>
      <if test="controlname != null">
        #{controlname,jdbcType=VARCHAR},
      </if>
      <if test="scccode != null">
        #{scccode,jdbcType=CHAR},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="pm25Emission != null">
        #{pm25Emission,jdbcType=DOUBLE},
      </if>
      <if test="pm10Emission != null">
        #{pm10Emission,jdbcType=DOUBLE},
      </if>
      <if test="vocEmission != null">
        #{vocEmission,jdbcType=DOUBLE},
      </if>
      <if test="nh3Emission != null">
        #{nh3Emission,jdbcType=DOUBLE},
      </if>
      <if test="so2Emission != null">
        #{so2Emission,jdbcType=DOUBLE},
      </if>
      <if test="coEmission != null">
        #{coEmission,jdbcType=DOUBLE},
      </if>
      <if test="ocEmission != null">
        #{ocEmission,jdbcType=DOUBLE},
      </if>
      <if test="bcEmission != null">
        #{bcEmission,jdbcType=DOUBLE},
      </if>
      <if test="noxEmission != null">
        #{noxEmission,jdbcType=DOUBLE},
      </if>
      <if test="pm25Max != null">
        #{pm25Max,jdbcType=DOUBLE},
      </if>
      <if test="pm10Max != null">
        #{pm10Max,jdbcType=DOUBLE},
      </if>
      <if test="vocMax != null">
        #{vocMax,jdbcType=DOUBLE},
      </if>
      <if test="nh3Max != null">
        #{nh3Max,jdbcType=DOUBLE},
      </if>
      <if test="so2Max != null">
        #{so2Max,jdbcType=DOUBLE},
      </if>
      <if test="coMax != null">
        #{coMax,jdbcType=DOUBLE},
      </if>
      <if test="ocMax != null">
        #{ocMax,jdbcType=DOUBLE},
      </if>
      <if test="bcMax != null">
        #{bcMax,jdbcType=DOUBLE},
      </if>
      <if test="noxMax != null">
        #{noxMax,jdbcType=DOUBLE},
      </if>
      <if test="pm25Unit != null">
        #{pm25Unit,jdbcType=CHAR},
      </if>
      <if test="pm10Unit != null">
        #{pm10Unit,jdbcType=CHAR},
      </if>
      <if test="vocUnit != null">
        #{vocUnit,jdbcType=CHAR},
      </if>
      <if test="nh3Unit != null">
        #{nh3Unit,jdbcType=CHAR},
      </if>
      <if test="so2Unit != null">
        #{so2Unit,jdbcType=CHAR},
      </if>
      <if test="coUnit != null">
        #{coUnit,jdbcType=CHAR},
      </if>
      <if test="ocUnit != null">
        #{ocUnit,jdbcType=CHAR},
      </if>
      <if test="bcUnit != null">
        #{bcUnit,jdbcType=CHAR},
      </if>
      <if test="noxUnit != null">
        #{noxUnit,jdbcType=CHAR},
      </if>
      <if test="sccDescribe != null">
        #{sccDescribe,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nankai.xining.bean.XjcydustStackExample" resultType="java.lang.Long">
    select count(*) from xjcydust_stack
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update xjcydust_stack
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.comId != null">
        com_id = #{record.comId,jdbcType=INTEGER},
      </if>
      <if test="record.stackId != null">
        stack_id = #{record.stackId,jdbcType=INTEGER},
      </if>
      <if test="record.year != null">
        year = #{record.year,jdbcType=CHAR},
      </if>
      <if test="record.sarea != null">
        sarea = #{record.sarea,jdbcType=INTEGER},
      </if>
      <if test="record.materialType != null">
        material_type = #{record.materialType,jdbcType=VARCHAR},
      </if>
      <if test="record.windfThresh != null">
        windf_thresh = #{record.windfThresh,jdbcType=DOUBLE},
      </if>
      <if test="record.windFriction != null">
        wind_friction = #{record.windFriction,jdbcType=DOUBLE},
      </if>
      <if test="record.groundRough != null">
        ground_rough = #{record.groundRough,jdbcType=DOUBLE},
      </if>
      <if test="record.materialRough != null">
        material_rough = #{record.materialRough,jdbcType=DOUBLE},
      </if>
      <if test="record.groundWindhigh != null">
        ground_windhigh = #{record.groundWindhigh,jdbcType=DOUBLE},
      </if>
      <if test="record.mWindnum != null">
        m_windnum = #{record.mWindnum,jdbcType=INTEGER},
      </if>
      <if test="record.groundWind != null">
        ground_wind = #{record.groundWind,jdbcType=DOUBLE},
      </if>
      <if test="record.controlname != null">
        controlname = #{record.controlname,jdbcType=VARCHAR},
      </if>
      <if test="record.scccode != null">
        scccode = #{record.scccode,jdbcType=CHAR},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.pm25Emission != null">
        pm25_emission = #{record.pm25Emission,jdbcType=DOUBLE},
      </if>
      <if test="record.pm10Emission != null">
        pm10_emission = #{record.pm10Emission,jdbcType=DOUBLE},
      </if>
      <if test="record.vocEmission != null">
        voc_emission = #{record.vocEmission,jdbcType=DOUBLE},
      </if>
      <if test="record.nh3Emission != null">
        nh3_emission = #{record.nh3Emission,jdbcType=DOUBLE},
      </if>
      <if test="record.so2Emission != null">
        so2_emission = #{record.so2Emission,jdbcType=DOUBLE},
      </if>
      <if test="record.coEmission != null">
        co_emission = #{record.coEmission,jdbcType=DOUBLE},
      </if>
      <if test="record.ocEmission != null">
        oc_emission = #{record.ocEmission,jdbcType=DOUBLE},
      </if>
      <if test="record.bcEmission != null">
        bc_emission = #{record.bcEmission,jdbcType=DOUBLE},
      </if>
      <if test="record.noxEmission != null">
        nox_emission = #{record.noxEmission,jdbcType=DOUBLE},
      </if>
      <if test="record.pm25Max != null">
        pm25_max = #{record.pm25Max,jdbcType=DOUBLE},
      </if>
      <if test="record.pm10Max != null">
        pm10_max = #{record.pm10Max,jdbcType=DOUBLE},
      </if>
      <if test="record.vocMax != null">
        voc_max = #{record.vocMax,jdbcType=DOUBLE},
      </if>
      <if test="record.nh3Max != null">
        nh3_max = #{record.nh3Max,jdbcType=DOUBLE},
      </if>
      <if test="record.so2Max != null">
        so2_max = #{record.so2Max,jdbcType=DOUBLE},
      </if>
      <if test="record.coMax != null">
        co_max = #{record.coMax,jdbcType=DOUBLE},
      </if>
      <if test="record.ocMax != null">
        oc_max = #{record.ocMax,jdbcType=DOUBLE},
      </if>
      <if test="record.bcMax != null">
        bc_max = #{record.bcMax,jdbcType=DOUBLE},
      </if>
      <if test="record.noxMax != null">
        nox_max = #{record.noxMax,jdbcType=DOUBLE},
      </if>
      <if test="record.pm25Unit != null">
        pm25_unit = #{record.pm25Unit,jdbcType=CHAR},
      </if>
      <if test="record.pm10Unit != null">
        pm10_unit = #{record.pm10Unit,jdbcType=CHAR},
      </if>
      <if test="record.vocUnit != null">
        voc_unit = #{record.vocUnit,jdbcType=CHAR},
      </if>
      <if test="record.nh3Unit != null">
        nh3_unit = #{record.nh3Unit,jdbcType=CHAR},
      </if>
      <if test="record.so2Unit != null">
        so2_unit = #{record.so2Unit,jdbcType=CHAR},
      </if>
      <if test="record.coUnit != null">
        co_unit = #{record.coUnit,jdbcType=CHAR},
      </if>
      <if test="record.ocUnit != null">
        oc_unit = #{record.ocUnit,jdbcType=CHAR},
      </if>
      <if test="record.bcUnit != null">
        bc_unit = #{record.bcUnit,jdbcType=CHAR},
      </if>
      <if test="record.noxUnit != null">
        nox_unit = #{record.noxUnit,jdbcType=CHAR},
      </if>
      <if test="record.sccDescribe != null">
        scc_describe = #{record.sccDescribe,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update xjcydust_stack
    set id = #{record.id,jdbcType=INTEGER},
      com_id = #{record.comId,jdbcType=INTEGER},
      stack_id = #{record.stackId,jdbcType=INTEGER},
      year = #{record.year,jdbcType=CHAR},
      sarea = #{record.sarea,jdbcType=INTEGER},
      material_type = #{record.materialType,jdbcType=VARCHAR},
      windf_thresh = #{record.windfThresh,jdbcType=DOUBLE},
      wind_friction = #{record.windFriction,jdbcType=DOUBLE},
      ground_rough = #{record.groundRough,jdbcType=DOUBLE},
      material_rough = #{record.materialRough,jdbcType=DOUBLE},
      ground_windhigh = #{record.groundWindhigh,jdbcType=DOUBLE},
      m_windnum = #{record.mWindnum,jdbcType=INTEGER},
      ground_wind = #{record.groundWind,jdbcType=DOUBLE},
      controlname = #{record.controlname,jdbcType=VARCHAR},
      scccode = #{record.scccode,jdbcType=CHAR},
      flag = #{record.flag,jdbcType=INTEGER},
      pm25_emission = #{record.pm25Emission,jdbcType=DOUBLE},
      pm10_emission = #{record.pm10Emission,jdbcType=DOUBLE},
      voc_emission = #{record.vocEmission,jdbcType=DOUBLE},
      nh3_emission = #{record.nh3Emission,jdbcType=DOUBLE},
      so2_emission = #{record.so2Emission,jdbcType=DOUBLE},
      co_emission = #{record.coEmission,jdbcType=DOUBLE},
      oc_emission = #{record.ocEmission,jdbcType=DOUBLE},
      bc_emission = #{record.bcEmission,jdbcType=DOUBLE},
      nox_emission = #{record.noxEmission,jdbcType=DOUBLE},
      pm25_max = #{record.pm25Max,jdbcType=DOUBLE},
      pm10_max = #{record.pm10Max,jdbcType=DOUBLE},
      voc_max = #{record.vocMax,jdbcType=DOUBLE},
      nh3_max = #{record.nh3Max,jdbcType=DOUBLE},
      so2_max = #{record.so2Max,jdbcType=DOUBLE},
      co_max = #{record.coMax,jdbcType=DOUBLE},
      oc_max = #{record.ocMax,jdbcType=DOUBLE},
      bc_max = #{record.bcMax,jdbcType=DOUBLE},
      nox_max = #{record.noxMax,jdbcType=DOUBLE},
      pm25_unit = #{record.pm25Unit,jdbcType=CHAR},
      pm10_unit = #{record.pm10Unit,jdbcType=CHAR},
      voc_unit = #{record.vocUnit,jdbcType=CHAR},
      nh3_unit = #{record.nh3Unit,jdbcType=CHAR},
      so2_unit = #{record.so2Unit,jdbcType=CHAR},
      co_unit = #{record.coUnit,jdbcType=CHAR},
      oc_unit = #{record.ocUnit,jdbcType=CHAR},
      bc_unit = #{record.bcUnit,jdbcType=CHAR},
      nox_unit = #{record.noxUnit,jdbcType=CHAR},
      scc_describe = #{record.sccDescribe,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nankai.xining.bean.XjcydustStack">
    update xjcydust_stack
    <set>
      <if test="comId != null">
        com_id = #{comId,jdbcType=INTEGER},
      </if>
      <if test="stackId != null">
        stack_id = #{stackId,jdbcType=INTEGER},
      </if>
      <if test="year != null">
        year = #{year,jdbcType=CHAR},
      </if>
      <if test="sarea != null">
        sarea = #{sarea,jdbcType=INTEGER},
      </if>
      <if test="materialType != null">
        material_type = #{materialType,jdbcType=VARCHAR},
      </if>
      <if test="windfThresh != null">
        windf_thresh = #{windfThresh,jdbcType=DOUBLE},
      </if>
      <if test="windFriction != null">
        wind_friction = #{windFriction,jdbcType=DOUBLE},
      </if>
      <if test="groundRough != null">
        ground_rough = #{groundRough,jdbcType=DOUBLE},
      </if>
      <if test="materialRough != null">
        material_rough = #{materialRough,jdbcType=DOUBLE},
      </if>
      <if test="groundWindhigh != null">
        ground_windhigh = #{groundWindhigh,jdbcType=DOUBLE},
      </if>
      <if test="mWindnum != null">
        m_windnum = #{mWindnum,jdbcType=INTEGER},
      </if>
      <if test="groundWind != null">
        ground_wind = #{groundWind,jdbcType=DOUBLE},
      </if>
      <if test="controlname != null">
        controlname = #{controlname,jdbcType=VARCHAR},
      </if>
      <if test="scccode != null">
        scccode = #{scccode,jdbcType=CHAR},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="pm25Emission != null">
        pm25_emission = #{pm25Emission,jdbcType=DOUBLE},
      </if>
      <if test="pm10Emission != null">
        pm10_emission = #{pm10Emission,jdbcType=DOUBLE},
      </if>
      <if test="vocEmission != null">
        voc_emission = #{vocEmission,jdbcType=DOUBLE},
      </if>
      <if test="nh3Emission != null">
        nh3_emission = #{nh3Emission,jdbcType=DOUBLE},
      </if>
      <if test="so2Emission != null">
        so2_emission = #{so2Emission,jdbcType=DOUBLE},
      </if>
      <if test="coEmission != null">
        co_emission = #{coEmission,jdbcType=DOUBLE},
      </if>
      <if test="ocEmission != null">
        oc_emission = #{ocEmission,jdbcType=DOUBLE},
      </if>
      <if test="bcEmission != null">
        bc_emission = #{bcEmission,jdbcType=DOUBLE},
      </if>
      <if test="noxEmission != null">
        nox_emission = #{noxEmission,jdbcType=DOUBLE},
      </if>
      <if test="pm25Max != null">
        pm25_max = #{pm25Max,jdbcType=DOUBLE},
      </if>
      <if test="pm10Max != null">
        pm10_max = #{pm10Max,jdbcType=DOUBLE},
      </if>
      <if test="vocMax != null">
        voc_max = #{vocMax,jdbcType=DOUBLE},
      </if>
      <if test="nh3Max != null">
        nh3_max = #{nh3Max,jdbcType=DOUBLE},
      </if>
      <if test="so2Max != null">
        so2_max = #{so2Max,jdbcType=DOUBLE},
      </if>
      <if test="coMax != null">
        co_max = #{coMax,jdbcType=DOUBLE},
      </if>
      <if test="ocMax != null">
        oc_max = #{ocMax,jdbcType=DOUBLE},
      </if>
      <if test="bcMax != null">
        bc_max = #{bcMax,jdbcType=DOUBLE},
      </if>
      <if test="noxMax != null">
        nox_max = #{noxMax,jdbcType=DOUBLE},
      </if>
      <if test="pm25Unit != null">
        pm25_unit = #{pm25Unit,jdbcType=CHAR},
      </if>
      <if test="pm10Unit != null">
        pm10_unit = #{pm10Unit,jdbcType=CHAR},
      </if>
      <if test="vocUnit != null">
        voc_unit = #{vocUnit,jdbcType=CHAR},
      </if>
      <if test="nh3Unit != null">
        nh3_unit = #{nh3Unit,jdbcType=CHAR},
      </if>
      <if test="so2Unit != null">
        so2_unit = #{so2Unit,jdbcType=CHAR},
      </if>
      <if test="coUnit != null">
        co_unit = #{coUnit,jdbcType=CHAR},
      </if>
      <if test="ocUnit != null">
        oc_unit = #{ocUnit,jdbcType=CHAR},
      </if>
      <if test="bcUnit != null">
        bc_unit = #{bcUnit,jdbcType=CHAR},
      </if>
      <if test="noxUnit != null">
        nox_unit = #{noxUnit,jdbcType=CHAR},
      </if>
      <if test="sccDescribe != null">
        scc_describe = #{sccDescribe,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nankai.xining.bean.XjcydustStack">
    update xjcydust_stack
    set com_id = #{comId,jdbcType=INTEGER},
      stack_id = #{stackId,jdbcType=INTEGER},
      year = #{year,jdbcType=CHAR},
      sarea = #{sarea,jdbcType=INTEGER},
      material_type = #{materialType,jdbcType=VARCHAR},
      windf_thresh = #{windfThresh,jdbcType=DOUBLE},
      wind_friction = #{windFriction,jdbcType=DOUBLE},
      ground_rough = #{groundRough,jdbcType=DOUBLE},
      material_rough = #{materialRough,jdbcType=DOUBLE},
      ground_windhigh = #{groundWindhigh,jdbcType=DOUBLE},
      m_windnum = #{mWindnum,jdbcType=INTEGER},
      ground_wind = #{groundWind,jdbcType=DOUBLE},
      controlname = #{controlname,jdbcType=VARCHAR},
      scccode = #{scccode,jdbcType=CHAR},
      flag = #{flag,jdbcType=INTEGER},
      pm25_emission = #{pm25Emission,jdbcType=DOUBLE},
      pm10_emission = #{pm10Emission,jdbcType=DOUBLE},
      voc_emission = #{vocEmission,jdbcType=DOUBLE},
      nh3_emission = #{nh3Emission,jdbcType=DOUBLE},
      so2_emission = #{so2Emission,jdbcType=DOUBLE},
      co_emission = #{coEmission,jdbcType=DOUBLE},
      oc_emission = #{ocEmission,jdbcType=DOUBLE},
      bc_emission = #{bcEmission,jdbcType=DOUBLE},
      nox_emission = #{noxEmission,jdbcType=DOUBLE},
      pm25_max = #{pm25Max,jdbcType=DOUBLE},
      pm10_max = #{pm10Max,jdbcType=DOUBLE},
      voc_max = #{vocMax,jdbcType=DOUBLE},
      nh3_max = #{nh3Max,jdbcType=DOUBLE},
      so2_max = #{so2Max,jdbcType=DOUBLE},
      co_max = #{coMax,jdbcType=DOUBLE},
      oc_max = #{ocMax,jdbcType=DOUBLE},
      bc_max = #{bcMax,jdbcType=DOUBLE},
      nox_max = #{noxMax,jdbcType=DOUBLE},
      pm25_unit = #{pm25Unit,jdbcType=CHAR},
      pm10_unit = #{pm10Unit,jdbcType=CHAR},
      voc_unit = #{vocUnit,jdbcType=CHAR},
      nh3_unit = #{nh3Unit,jdbcType=CHAR},
      so2_unit = #{so2Unit,jdbcType=CHAR},
      co_unit = #{coUnit,jdbcType=CHAR},
      oc_unit = #{ocUnit,jdbcType=CHAR},
      bc_unit = #{bcUnit,jdbcType=CHAR},
      nox_unit = #{noxUnit,jdbcType=CHAR},
      scc_describe = #{sccDescribe,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>