<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nankai.xining.repository.ProfileVocMapper">
  <resultMap id="BaseResultMap" type="com.nankai.xining.bean.ProfileVoc">
    <id column="VOC_ID" jdbcType="INTEGER" property="vocId" />
    <result column="FORM_MOLECULAR" jdbcType="DOUBLE" property="formMolecular" />
    <result column="FORM_DENOMINATOR" jdbcType="DOUBLE" property="formDenominator" />
    <result column="FORM_RATE" jdbcType="DOUBLE" property="formRate" />
    <result column="ALD2_MOLECULAR" jdbcType="DOUBLE" property="ald2Molecular" />
    <result column="ALD2_DENOMINATOR" jdbcType="DOUBLE" property="ald2Denominator" />
    <result column="ALD2_RATE" jdbcType="DOUBLE" property="ald2Rate" />
    <result column="ALDX_MOLECULAR" jdbcType="DOUBLE" property="aldxMolecular" />
    <result column="ALDX_DENOMINATOR" jdbcType="DOUBLE" property="aldxDenominator" />
    <result column="ALDX_RATE" jdbcType="DOUBLE" property="aldxRate" />
    <result column="ETOH_MOLECULAR" jdbcType="DOUBLE" property="etohMolecular" />
    <result column="ETOH_DENOMINATOR" jdbcType="DOUBLE" property="etohDenominator" />
    <result column="ETOH_RATE" jdbcType="DOUBLE" property="etohRate" />
    <result column="CH4_MOLECULAR" jdbcType="DOUBLE" property="ch4Molecular" />
    <result column="CH4_DENOMINATOR" jdbcType="DOUBLE" property="ch4Denominator" />
    <result column="CH4_RATE" jdbcType="DOUBLE" property="ch4Rate" />
    <result column="MEOH_MOLECULAR" jdbcType="DOUBLE" property="meohMolecular" />
    <result column="MEOH_DENOMINATOR" jdbcType="DOUBLE" property="meohDenominator" />
    <result column="MEOH_RATE" jdbcType="DOUBLE" property="meohRate" />
    <result column="ETHA_MOLECULAR" jdbcType="DOUBLE" property="ethaMolecular" />
    <result column="ETHA_DENOMINATOR" jdbcType="DOUBLE" property="ethaDenominator" />
    <result column="ETHA_RATE" jdbcType="DOUBLE" property="ethaRate" />
    <result column="PAR_MOLECULAR" jdbcType="DOUBLE" property="parMolecular" />
    <result column="PAR_DENOMINATOR" jdbcType="DOUBLE" property="parDenominator" />
    <result column="PAR_RATE" jdbcType="DOUBLE" property="parRate" />
    <result column="ETH_MOLECULAR" jdbcType="DOUBLE" property="ethMolecular" />
    <result column="ETH_DENOMINATOR" jdbcType="DOUBLE" property="ethDenominator" />
    <result column="ETH_RATE" jdbcType="DOUBLE" property="ethRate" />
    <result column="OLE_MOLECULAR" jdbcType="DOUBLE" property="oleMolecular" />
    <result column="OLE_DENOMINATOR" jdbcType="DOUBLE" property="oleDenominator" />
    <result column="OLE_RATE" jdbcType="DOUBLE" property="oleRate" />
    <result column="IOLE_MOLECULAR" jdbcType="DOUBLE" property="ioleMolecular" />
    <result column="IOLE_DENOMINATOR" jdbcType="DOUBLE" property="ioleDenominator" />
    <result column="IOLE_RATE" jdbcType="DOUBLE" property="ioleRate" />
    <result column="ISOP_MOLECULAR" jdbcType="DOUBLE" property="isopMolecular" />
    <result column="ISOP_DENOMINATOR" jdbcType="DOUBLE" property="isopDenominator" />
    <result column="ISOP_RATE" jdbcType="DOUBLE" property="isopRate" />
    <result column="TERP_MOLECULAR" jdbcType="DOUBLE" property="terpMolecular" />
    <result column="TERP_DENOMINATOR" jdbcType="DOUBLE" property="terpDenominator" />
    <result column="TERP_RATE" jdbcType="DOUBLE" property="terpRate" />
    <result column="TOL_MOLECULAR" jdbcType="DOUBLE" property="tolMolecular" />
    <result column="TOL_DENOMINATOR" jdbcType="DOUBLE" property="tolDenominator" />
    <result column="TOL_RATE" jdbcType="DOUBLE" property="tolRate" />
    <result column="XYL_MOLECULAR" jdbcType="DOUBLE" property="xylMolecular" />
    <result column="XYL_DENOMINATOR" jdbcType="DOUBLE" property="xylDenominator" />
    <result column="XYL_RATE" jdbcType="DOUBLE" property="xylRate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    VOC_ID, FORM_MOLECULAR, FORM_DENOMINATOR, FORM_RATE, ALD2_MOLECULAR, ALD2_DENOMINATOR, 
    ALD2_RATE, ALDX_MOLECULAR, ALDX_DENOMINATOR, ALDX_RATE, ETOH_MOLECULAR, ETOH_DENOMINATOR, 
    ETOH_RATE, CH4_MOLECULAR, CH4_DENOMINATOR, CH4_RATE, MEOH_MOLECULAR, MEOH_DENOMINATOR, 
    MEOH_RATE, ETHA_MOLECULAR, ETHA_DENOMINATOR, ETHA_RATE, PAR_MOLECULAR, PAR_DENOMINATOR, 
    PAR_RATE, ETH_MOLECULAR, ETH_DENOMINATOR, ETH_RATE, OLE_MOLECULAR, OLE_DENOMINATOR, 
    OLE_RATE, IOLE_MOLECULAR, IOLE_DENOMINATOR, IOLE_RATE, ISOP_MOLECULAR, ISOP_DENOMINATOR, 
    ISOP_RATE, TERP_MOLECULAR, TERP_DENOMINATOR, TERP_RATE, TOL_MOLECULAR, TOL_DENOMINATOR, 
    TOL_RATE, XYL_MOLECULAR, XYL_DENOMINATOR, XYL_RATE
  </sql>
  <select id="selectByExample" parameterType="com.nankai.xining.bean.ProfileVocExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from profile_voc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from profile_voc
    where VOC_ID = #{vocId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from profile_voc
    where VOC_ID = #{vocId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.nankai.xining.bean.ProfileVocExample">
    delete from profile_voc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nankai.xining.bean.ProfileVoc">
    insert into profile_voc (VOC_ID, FORM_MOLECULAR, FORM_DENOMINATOR, 
      FORM_RATE, ALD2_MOLECULAR, ALD2_DENOMINATOR, 
      ALD2_RATE, ALDX_MOLECULAR, ALDX_DENOMINATOR, 
      ALDX_RATE, ETOH_MOLECULAR, ETOH_DENOMINATOR, 
      ETOH_RATE, CH4_MOLECULAR, CH4_DENOMINATOR, 
      CH4_RATE, MEOH_MOLECULAR, MEOH_DENOMINATOR, 
      MEOH_RATE, ETHA_MOLECULAR, ETHA_DENOMINATOR, 
      ETHA_RATE, PAR_MOLECULAR, PAR_DENOMINATOR, 
      PAR_RATE, ETH_MOLECULAR, ETH_DENOMINATOR, 
      ETH_RATE, OLE_MOLECULAR, OLE_DENOMINATOR, 
      OLE_RATE, IOLE_MOLECULAR, IOLE_DENOMINATOR, 
      IOLE_RATE, ISOP_MOLECULAR, ISOP_DENOMINATOR, 
      ISOP_RATE, TERP_MOLECULAR, TERP_DENOMINATOR, 
      TERP_RATE, TOL_MOLECULAR, TOL_DENOMINATOR, 
      TOL_RATE, XYL_MOLECULAR, XYL_DENOMINATOR, 
      XYL_RATE)
    values (#{vocId,jdbcType=INTEGER}, #{formMolecular,jdbcType=DOUBLE}, #{formDenominator,jdbcType=DOUBLE}, 
      #{formRate,jdbcType=DOUBLE}, #{ald2Molecular,jdbcType=DOUBLE}, #{ald2Denominator,jdbcType=DOUBLE}, 
      #{ald2Rate,jdbcType=DOUBLE}, #{aldxMolecular,jdbcType=DOUBLE}, #{aldxDenominator,jdbcType=DOUBLE}, 
      #{aldxRate,jdbcType=DOUBLE}, #{etohMolecular,jdbcType=DOUBLE}, #{etohDenominator,jdbcType=DOUBLE}, 
      #{etohRate,jdbcType=DOUBLE}, #{ch4Molecular,jdbcType=DOUBLE}, #{ch4Denominator,jdbcType=DOUBLE}, 
      #{ch4Rate,jdbcType=DOUBLE}, #{meohMolecular,jdbcType=DOUBLE}, #{meohDenominator,jdbcType=DOUBLE}, 
      #{meohRate,jdbcType=DOUBLE}, #{ethaMolecular,jdbcType=DOUBLE}, #{ethaDenominator,jdbcType=DOUBLE}, 
      #{ethaRate,jdbcType=DOUBLE}, #{parMolecular,jdbcType=DOUBLE}, #{parDenominator,jdbcType=DOUBLE}, 
      #{parRate,jdbcType=DOUBLE}, #{ethMolecular,jdbcType=DOUBLE}, #{ethDenominator,jdbcType=DOUBLE}, 
      #{ethRate,jdbcType=DOUBLE}, #{oleMolecular,jdbcType=DOUBLE}, #{oleDenominator,jdbcType=DOUBLE}, 
      #{oleRate,jdbcType=DOUBLE}, #{ioleMolecular,jdbcType=DOUBLE}, #{ioleDenominator,jdbcType=DOUBLE}, 
      #{ioleRate,jdbcType=DOUBLE}, #{isopMolecular,jdbcType=DOUBLE}, #{isopDenominator,jdbcType=DOUBLE}, 
      #{isopRate,jdbcType=DOUBLE}, #{terpMolecular,jdbcType=DOUBLE}, #{terpDenominator,jdbcType=DOUBLE}, 
      #{terpRate,jdbcType=DOUBLE}, #{tolMolecular,jdbcType=DOUBLE}, #{tolDenominator,jdbcType=DOUBLE}, 
      #{tolRate,jdbcType=DOUBLE}, #{xylMolecular,jdbcType=DOUBLE}, #{xylDenominator,jdbcType=DOUBLE}, 
      #{xylRate,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.nankai.xining.bean.ProfileVoc">
    insert into profile_voc
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="vocId != null">
        VOC_ID,
      </if>
      <if test="formMolecular != null">
        FORM_MOLECULAR,
      </if>
      <if test="formDenominator != null">
        FORM_DENOMINATOR,
      </if>
      <if test="formRate != null">
        FORM_RATE,
      </if>
      <if test="ald2Molecular != null">
        ALD2_MOLECULAR,
      </if>
      <if test="ald2Denominator != null">
        ALD2_DENOMINATOR,
      </if>
      <if test="ald2Rate != null">
        ALD2_RATE,
      </if>
      <if test="aldxMolecular != null">
        ALDX_MOLECULAR,
      </if>
      <if test="aldxDenominator != null">
        ALDX_DENOMINATOR,
      </if>
      <if test="aldxRate != null">
        ALDX_RATE,
      </if>
      <if test="etohMolecular != null">
        ETOH_MOLECULAR,
      </if>
      <if test="etohDenominator != null">
        ETOH_DENOMINATOR,
      </if>
      <if test="etohRate != null">
        ETOH_RATE,
      </if>
      <if test="ch4Molecular != null">
        CH4_MOLECULAR,
      </if>
      <if test="ch4Denominator != null">
        CH4_DENOMINATOR,
      </if>
      <if test="ch4Rate != null">
        CH4_RATE,
      </if>
      <if test="meohMolecular != null">
        MEOH_MOLECULAR,
      </if>
      <if test="meohDenominator != null">
        MEOH_DENOMINATOR,
      </if>
      <if test="meohRate != null">
        MEOH_RATE,
      </if>
      <if test="ethaMolecular != null">
        ETHA_MOLECULAR,
      </if>
      <if test="ethaDenominator != null">
        ETHA_DENOMINATOR,
      </if>
      <if test="ethaRate != null">
        ETHA_RATE,
      </if>
      <if test="parMolecular != null">
        PAR_MOLECULAR,
      </if>
      <if test="parDenominator != null">
        PAR_DENOMINATOR,
      </if>
      <if test="parRate != null">
        PAR_RATE,
      </if>
      <if test="ethMolecular != null">
        ETH_MOLECULAR,
      </if>
      <if test="ethDenominator != null">
        ETH_DENOMINATOR,
      </if>
      <if test="ethRate != null">
        ETH_RATE,
      </if>
      <if test="oleMolecular != null">
        OLE_MOLECULAR,
      </if>
      <if test="oleDenominator != null">
        OLE_DENOMINATOR,
      </if>
      <if test="oleRate != null">
        OLE_RATE,
      </if>
      <if test="ioleMolecular != null">
        IOLE_MOLECULAR,
      </if>
      <if test="ioleDenominator != null">
        IOLE_DENOMINATOR,
      </if>
      <if test="ioleRate != null">
        IOLE_RATE,
      </if>
      <if test="isopMolecular != null">
        ISOP_MOLECULAR,
      </if>
      <if test="isopDenominator != null">
        ISOP_DENOMINATOR,
      </if>
      <if test="isopRate != null">
        ISOP_RATE,
      </if>
      <if test="terpMolecular != null">
        TERP_MOLECULAR,
      </if>
      <if test="terpDenominator != null">
        TERP_DENOMINATOR,
      </if>
      <if test="terpRate != null">
        TERP_RATE,
      </if>
      <if test="tolMolecular != null">
        TOL_MOLECULAR,
      </if>
      <if test="tolDenominator != null">
        TOL_DENOMINATOR,
      </if>
      <if test="tolRate != null">
        TOL_RATE,
      </if>
      <if test="xylMolecular != null">
        XYL_MOLECULAR,
      </if>
      <if test="xylDenominator != null">
        XYL_DENOMINATOR,
      </if>
      <if test="xylRate != null">
        XYL_RATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="vocId != null">
        #{vocId,jdbcType=INTEGER},
      </if>
      <if test="formMolecular != null">
        #{formMolecular,jdbcType=DOUBLE},
      </if>
      <if test="formDenominator != null">
        #{formDenominator,jdbcType=DOUBLE},
      </if>
      <if test="formRate != null">
        #{formRate,jdbcType=DOUBLE},
      </if>
      <if test="ald2Molecular != null">
        #{ald2Molecular,jdbcType=DOUBLE},
      </if>
      <if test="ald2Denominator != null">
        #{ald2Denominator,jdbcType=DOUBLE},
      </if>
      <if test="ald2Rate != null">
        #{ald2Rate,jdbcType=DOUBLE},
      </if>
      <if test="aldxMolecular != null">
        #{aldxMolecular,jdbcType=DOUBLE},
      </if>
      <if test="aldxDenominator != null">
        #{aldxDenominator,jdbcType=DOUBLE},
      </if>
      <if test="aldxRate != null">
        #{aldxRate,jdbcType=DOUBLE},
      </if>
      <if test="etohMolecular != null">
        #{etohMolecular,jdbcType=DOUBLE},
      </if>
      <if test="etohDenominator != null">
        #{etohDenominator,jdbcType=DOUBLE},
      </if>
      <if test="etohRate != null">
        #{etohRate,jdbcType=DOUBLE},
      </if>
      <if test="ch4Molecular != null">
        #{ch4Molecular,jdbcType=DOUBLE},
      </if>
      <if test="ch4Denominator != null">
        #{ch4Denominator,jdbcType=DOUBLE},
      </if>
      <if test="ch4Rate != null">
        #{ch4Rate,jdbcType=DOUBLE},
      </if>
      <if test="meohMolecular != null">
        #{meohMolecular,jdbcType=DOUBLE},
      </if>
      <if test="meohDenominator != null">
        #{meohDenominator,jdbcType=DOUBLE},
      </if>
      <if test="meohRate != null">
        #{meohRate,jdbcType=DOUBLE},
      </if>
      <if test="ethaMolecular != null">
        #{ethaMolecular,jdbcType=DOUBLE},
      </if>
      <if test="ethaDenominator != null">
        #{ethaDenominator,jdbcType=DOUBLE},
      </if>
      <if test="ethaRate != null">
        #{ethaRate,jdbcType=DOUBLE},
      </if>
      <if test="parMolecular != null">
        #{parMolecular,jdbcType=DOUBLE},
      </if>
      <if test="parDenominator != null">
        #{parDenominator,jdbcType=DOUBLE},
      </if>
      <if test="parRate != null">
        #{parRate,jdbcType=DOUBLE},
      </if>
      <if test="ethMolecular != null">
        #{ethMolecular,jdbcType=DOUBLE},
      </if>
      <if test="ethDenominator != null">
        #{ethDenominator,jdbcType=DOUBLE},
      </if>
      <if test="ethRate != null">
        #{ethRate,jdbcType=DOUBLE},
      </if>
      <if test="oleMolecular != null">
        #{oleMolecular,jdbcType=DOUBLE},
      </if>
      <if test="oleDenominator != null">
        #{oleDenominator,jdbcType=DOUBLE},
      </if>
      <if test="oleRate != null">
        #{oleRate,jdbcType=DOUBLE},
      </if>
      <if test="ioleMolecular != null">
        #{ioleMolecular,jdbcType=DOUBLE},
      </if>
      <if test="ioleDenominator != null">
        #{ioleDenominator,jdbcType=DOUBLE},
      </if>
      <if test="ioleRate != null">
        #{ioleRate,jdbcType=DOUBLE},
      </if>
      <if test="isopMolecular != null">
        #{isopMolecular,jdbcType=DOUBLE},
      </if>
      <if test="isopDenominator != null">
        #{isopDenominator,jdbcType=DOUBLE},
      </if>
      <if test="isopRate != null">
        #{isopRate,jdbcType=DOUBLE},
      </if>
      <if test="terpMolecular != null">
        #{terpMolecular,jdbcType=DOUBLE},
      </if>
      <if test="terpDenominator != null">
        #{terpDenominator,jdbcType=DOUBLE},
      </if>
      <if test="terpRate != null">
        #{terpRate,jdbcType=DOUBLE},
      </if>
      <if test="tolMolecular != null">
        #{tolMolecular,jdbcType=DOUBLE},
      </if>
      <if test="tolDenominator != null">
        #{tolDenominator,jdbcType=DOUBLE},
      </if>
      <if test="tolRate != null">
        #{tolRate,jdbcType=DOUBLE},
      </if>
      <if test="xylMolecular != null">
        #{xylMolecular,jdbcType=DOUBLE},
      </if>
      <if test="xylDenominator != null">
        #{xylDenominator,jdbcType=DOUBLE},
      </if>
      <if test="xylRate != null">
        #{xylRate,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nankai.xining.bean.ProfileVocExample" resultType="java.lang.Long">
    select count(*) from profile_voc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update profile_voc
    <set>
      <if test="record.vocId != null">
        VOC_ID = #{record.vocId,jdbcType=INTEGER},
      </if>
      <if test="record.formMolecular != null">
        FORM_MOLECULAR = #{record.formMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.formDenominator != null">
        FORM_DENOMINATOR = #{record.formDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.formRate != null">
        FORM_RATE = #{record.formRate,jdbcType=DOUBLE},
      </if>
      <if test="record.ald2Molecular != null">
        ALD2_MOLECULAR = #{record.ald2Molecular,jdbcType=DOUBLE},
      </if>
      <if test="record.ald2Denominator != null">
        ALD2_DENOMINATOR = #{record.ald2Denominator,jdbcType=DOUBLE},
      </if>
      <if test="record.ald2Rate != null">
        ALD2_RATE = #{record.ald2Rate,jdbcType=DOUBLE},
      </if>
      <if test="record.aldxMolecular != null">
        ALDX_MOLECULAR = #{record.aldxMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.aldxDenominator != null">
        ALDX_DENOMINATOR = #{record.aldxDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.aldxRate != null">
        ALDX_RATE = #{record.aldxRate,jdbcType=DOUBLE},
      </if>
      <if test="record.etohMolecular != null">
        ETOH_MOLECULAR = #{record.etohMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.etohDenominator != null">
        ETOH_DENOMINATOR = #{record.etohDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.etohRate != null">
        ETOH_RATE = #{record.etohRate,jdbcType=DOUBLE},
      </if>
      <if test="record.ch4Molecular != null">
        CH4_MOLECULAR = #{record.ch4Molecular,jdbcType=DOUBLE},
      </if>
      <if test="record.ch4Denominator != null">
        CH4_DENOMINATOR = #{record.ch4Denominator,jdbcType=DOUBLE},
      </if>
      <if test="record.ch4Rate != null">
        CH4_RATE = #{record.ch4Rate,jdbcType=DOUBLE},
      </if>
      <if test="record.meohMolecular != null">
        MEOH_MOLECULAR = #{record.meohMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.meohDenominator != null">
        MEOH_DENOMINATOR = #{record.meohDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.meohRate != null">
        MEOH_RATE = #{record.meohRate,jdbcType=DOUBLE},
      </if>
      <if test="record.ethaMolecular != null">
        ETHA_MOLECULAR = #{record.ethaMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.ethaDenominator != null">
        ETHA_DENOMINATOR = #{record.ethaDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.ethaRate != null">
        ETHA_RATE = #{record.ethaRate,jdbcType=DOUBLE},
      </if>
      <if test="record.parMolecular != null">
        PAR_MOLECULAR = #{record.parMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.parDenominator != null">
        PAR_DENOMINATOR = #{record.parDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.parRate != null">
        PAR_RATE = #{record.parRate,jdbcType=DOUBLE},
      </if>
      <if test="record.ethMolecular != null">
        ETH_MOLECULAR = #{record.ethMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.ethDenominator != null">
        ETH_DENOMINATOR = #{record.ethDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.ethRate != null">
        ETH_RATE = #{record.ethRate,jdbcType=DOUBLE},
      </if>
      <if test="record.oleMolecular != null">
        OLE_MOLECULAR = #{record.oleMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.oleDenominator != null">
        OLE_DENOMINATOR = #{record.oleDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.oleRate != null">
        OLE_RATE = #{record.oleRate,jdbcType=DOUBLE},
      </if>
      <if test="record.ioleMolecular != null">
        IOLE_MOLECULAR = #{record.ioleMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.ioleDenominator != null">
        IOLE_DENOMINATOR = #{record.ioleDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.ioleRate != null">
        IOLE_RATE = #{record.ioleRate,jdbcType=DOUBLE},
      </if>
      <if test="record.isopMolecular != null">
        ISOP_MOLECULAR = #{record.isopMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.isopDenominator != null">
        ISOP_DENOMINATOR = #{record.isopDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.isopRate != null">
        ISOP_RATE = #{record.isopRate,jdbcType=DOUBLE},
      </if>
      <if test="record.terpMolecular != null">
        TERP_MOLECULAR = #{record.terpMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.terpDenominator != null">
        TERP_DENOMINATOR = #{record.terpDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.terpRate != null">
        TERP_RATE = #{record.terpRate,jdbcType=DOUBLE},
      </if>
      <if test="record.tolMolecular != null">
        TOL_MOLECULAR = #{record.tolMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.tolDenominator != null">
        TOL_DENOMINATOR = #{record.tolDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.tolRate != null">
        TOL_RATE = #{record.tolRate,jdbcType=DOUBLE},
      </if>
      <if test="record.xylMolecular != null">
        XYL_MOLECULAR = #{record.xylMolecular,jdbcType=DOUBLE},
      </if>
      <if test="record.xylDenominator != null">
        XYL_DENOMINATOR = #{record.xylDenominator,jdbcType=DOUBLE},
      </if>
      <if test="record.xylRate != null">
        XYL_RATE = #{record.xylRate,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update profile_voc
    set VOC_ID = #{record.vocId,jdbcType=INTEGER},
      FORM_MOLECULAR = #{record.formMolecular,jdbcType=DOUBLE},
      FORM_DENOMINATOR = #{record.formDenominator,jdbcType=DOUBLE},
      FORM_RATE = #{record.formRate,jdbcType=DOUBLE},
      ALD2_MOLECULAR = #{record.ald2Molecular,jdbcType=DOUBLE},
      ALD2_DENOMINATOR = #{record.ald2Denominator,jdbcType=DOUBLE},
      ALD2_RATE = #{record.ald2Rate,jdbcType=DOUBLE},
      ALDX_MOLECULAR = #{record.aldxMolecular,jdbcType=DOUBLE},
      ALDX_DENOMINATOR = #{record.aldxDenominator,jdbcType=DOUBLE},
      ALDX_RATE = #{record.aldxRate,jdbcType=DOUBLE},
      ETOH_MOLECULAR = #{record.etohMolecular,jdbcType=DOUBLE},
      ETOH_DENOMINATOR = #{record.etohDenominator,jdbcType=DOUBLE},
      ETOH_RATE = #{record.etohRate,jdbcType=DOUBLE},
      CH4_MOLECULAR = #{record.ch4Molecular,jdbcType=DOUBLE},
      CH4_DENOMINATOR = #{record.ch4Denominator,jdbcType=DOUBLE},
      CH4_RATE = #{record.ch4Rate,jdbcType=DOUBLE},
      MEOH_MOLECULAR = #{record.meohMolecular,jdbcType=DOUBLE},
      MEOH_DENOMINATOR = #{record.meohDenominator,jdbcType=DOUBLE},
      MEOH_RATE = #{record.meohRate,jdbcType=DOUBLE},
      ETHA_MOLECULAR = #{record.ethaMolecular,jdbcType=DOUBLE},
      ETHA_DENOMINATOR = #{record.ethaDenominator,jdbcType=DOUBLE},
      ETHA_RATE = #{record.ethaRate,jdbcType=DOUBLE},
      PAR_MOLECULAR = #{record.parMolecular,jdbcType=DOUBLE},
      PAR_DENOMINATOR = #{record.parDenominator,jdbcType=DOUBLE},
      PAR_RATE = #{record.parRate,jdbcType=DOUBLE},
      ETH_MOLECULAR = #{record.ethMolecular,jdbcType=DOUBLE},
      ETH_DENOMINATOR = #{record.ethDenominator,jdbcType=DOUBLE},
      ETH_RATE = #{record.ethRate,jdbcType=DOUBLE},
      OLE_MOLECULAR = #{record.oleMolecular,jdbcType=DOUBLE},
      OLE_DENOMINATOR = #{record.oleDenominator,jdbcType=DOUBLE},
      OLE_RATE = #{record.oleRate,jdbcType=DOUBLE},
      IOLE_MOLECULAR = #{record.ioleMolecular,jdbcType=DOUBLE},
      IOLE_DENOMINATOR = #{record.ioleDenominator,jdbcType=DOUBLE},
      IOLE_RATE = #{record.ioleRate,jdbcType=DOUBLE},
      ISOP_MOLECULAR = #{record.isopMolecular,jdbcType=DOUBLE},
      ISOP_DENOMINATOR = #{record.isopDenominator,jdbcType=DOUBLE},
      ISOP_RATE = #{record.isopRate,jdbcType=DOUBLE},
      TERP_MOLECULAR = #{record.terpMolecular,jdbcType=DOUBLE},
      TERP_DENOMINATOR = #{record.terpDenominator,jdbcType=DOUBLE},
      TERP_RATE = #{record.terpRate,jdbcType=DOUBLE},
      TOL_MOLECULAR = #{record.tolMolecular,jdbcType=DOUBLE},
      TOL_DENOMINATOR = #{record.tolDenominator,jdbcType=DOUBLE},
      TOL_RATE = #{record.tolRate,jdbcType=DOUBLE},
      XYL_MOLECULAR = #{record.xylMolecular,jdbcType=DOUBLE},
      XYL_DENOMINATOR = #{record.xylDenominator,jdbcType=DOUBLE},
      XYL_RATE = #{record.xylRate,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nankai.xining.bean.ProfileVoc">
    update profile_voc
    <set>
      <if test="formMolecular != null">
        FORM_MOLECULAR = #{formMolecular,jdbcType=DOUBLE},
      </if>
      <if test="formDenominator != null">
        FORM_DENOMINATOR = #{formDenominator,jdbcType=DOUBLE},
      </if>
      <if test="formRate != null">
        FORM_RATE = #{formRate,jdbcType=DOUBLE},
      </if>
      <if test="ald2Molecular != null">
        ALD2_MOLECULAR = #{ald2Molecular,jdbcType=DOUBLE},
      </if>
      <if test="ald2Denominator != null">
        ALD2_DENOMINATOR = #{ald2Denominator,jdbcType=DOUBLE},
      </if>
      <if test="ald2Rate != null">
        ALD2_RATE = #{ald2Rate,jdbcType=DOUBLE},
      </if>
      <if test="aldxMolecular != null">
        ALDX_MOLECULAR = #{aldxMolecular,jdbcType=DOUBLE},
      </if>
      <if test="aldxDenominator != null">
        ALDX_DENOMINATOR = #{aldxDenominator,jdbcType=DOUBLE},
      </if>
      <if test="aldxRate != null">
        ALDX_RATE = #{aldxRate,jdbcType=DOUBLE},
      </if>
      <if test="etohMolecular != null">
        ETOH_MOLECULAR = #{etohMolecular,jdbcType=DOUBLE},
      </if>
      <if test="etohDenominator != null">
        ETOH_DENOMINATOR = #{etohDenominator,jdbcType=DOUBLE},
      </if>
      <if test="etohRate != null">
        ETOH_RATE = #{etohRate,jdbcType=DOUBLE},
      </if>
      <if test="ch4Molecular != null">
        CH4_MOLECULAR = #{ch4Molecular,jdbcType=DOUBLE},
      </if>
      <if test="ch4Denominator != null">
        CH4_DENOMINATOR = #{ch4Denominator,jdbcType=DOUBLE},
      </if>
      <if test="ch4Rate != null">
        CH4_RATE = #{ch4Rate,jdbcType=DOUBLE},
      </if>
      <if test="meohMolecular != null">
        MEOH_MOLECULAR = #{meohMolecular,jdbcType=DOUBLE},
      </if>
      <if test="meohDenominator != null">
        MEOH_DENOMINATOR = #{meohDenominator,jdbcType=DOUBLE},
      </if>
      <if test="meohRate != null">
        MEOH_RATE = #{meohRate,jdbcType=DOUBLE},
      </if>
      <if test="ethaMolecular != null">
        ETHA_MOLECULAR = #{ethaMolecular,jdbcType=DOUBLE},
      </if>
      <if test="ethaDenominator != null">
        ETHA_DENOMINATOR = #{ethaDenominator,jdbcType=DOUBLE},
      </if>
      <if test="ethaRate != null">
        ETHA_RATE = #{ethaRate,jdbcType=DOUBLE},
      </if>
      <if test="parMolecular != null">
        PAR_MOLECULAR = #{parMolecular,jdbcType=DOUBLE},
      </if>
      <if test="parDenominator != null">
        PAR_DENOMINATOR = #{parDenominator,jdbcType=DOUBLE},
      </if>
      <if test="parRate != null">
        PAR_RATE = #{parRate,jdbcType=DOUBLE},
      </if>
      <if test="ethMolecular != null">
        ETH_MOLECULAR = #{ethMolecular,jdbcType=DOUBLE},
      </if>
      <if test="ethDenominator != null">
        ETH_DENOMINATOR = #{ethDenominator,jdbcType=DOUBLE},
      </if>
      <if test="ethRate != null">
        ETH_RATE = #{ethRate,jdbcType=DOUBLE},
      </if>
      <if test="oleMolecular != null">
        OLE_MOLECULAR = #{oleMolecular,jdbcType=DOUBLE},
      </if>
      <if test="oleDenominator != null">
        OLE_DENOMINATOR = #{oleDenominator,jdbcType=DOUBLE},
      </if>
      <if test="oleRate != null">
        OLE_RATE = #{oleRate,jdbcType=DOUBLE},
      </if>
      <if test="ioleMolecular != null">
        IOLE_MOLECULAR = #{ioleMolecular,jdbcType=DOUBLE},
      </if>
      <if test="ioleDenominator != null">
        IOLE_DENOMINATOR = #{ioleDenominator,jdbcType=DOUBLE},
      </if>
      <if test="ioleRate != null">
        IOLE_RATE = #{ioleRate,jdbcType=DOUBLE},
      </if>
      <if test="isopMolecular != null">
        ISOP_MOLECULAR = #{isopMolecular,jdbcType=DOUBLE},
      </if>
      <if test="isopDenominator != null">
        ISOP_DENOMINATOR = #{isopDenominator,jdbcType=DOUBLE},
      </if>
      <if test="isopRate != null">
        ISOP_RATE = #{isopRate,jdbcType=DOUBLE},
      </if>
      <if test="terpMolecular != null">
        TERP_MOLECULAR = #{terpMolecular,jdbcType=DOUBLE},
      </if>
      <if test="terpDenominator != null">
        TERP_DENOMINATOR = #{terpDenominator,jdbcType=DOUBLE},
      </if>
      <if test="terpRate != null">
        TERP_RATE = #{terpRate,jdbcType=DOUBLE},
      </if>
      <if test="tolMolecular != null">
        TOL_MOLECULAR = #{tolMolecular,jdbcType=DOUBLE},
      </if>
      <if test="tolDenominator != null">
        TOL_DENOMINATOR = #{tolDenominator,jdbcType=DOUBLE},
      </if>
      <if test="tolRate != null">
        TOL_RATE = #{tolRate,jdbcType=DOUBLE},
      </if>
      <if test="xylMolecular != null">
        XYL_MOLECULAR = #{xylMolecular,jdbcType=DOUBLE},
      </if>
      <if test="xylDenominator != null">
        XYL_DENOMINATOR = #{xylDenominator,jdbcType=DOUBLE},
      </if>
      <if test="xylRate != null">
        XYL_RATE = #{xylRate,jdbcType=DOUBLE},
      </if>
    </set>
    where VOC_ID = #{vocId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nankai.xining.bean.ProfileVoc">
    update profile_voc
    set FORM_MOLECULAR = #{formMolecular,jdbcType=DOUBLE},
      FORM_DENOMINATOR = #{formDenominator,jdbcType=DOUBLE},
      FORM_RATE = #{formRate,jdbcType=DOUBLE},
      ALD2_MOLECULAR = #{ald2Molecular,jdbcType=DOUBLE},
      ALD2_DENOMINATOR = #{ald2Denominator,jdbcType=DOUBLE},
      ALD2_RATE = #{ald2Rate,jdbcType=DOUBLE},
      ALDX_MOLECULAR = #{aldxMolecular,jdbcType=DOUBLE},
      ALDX_DENOMINATOR = #{aldxDenominator,jdbcType=DOUBLE},
      ALDX_RATE = #{aldxRate,jdbcType=DOUBLE},
      ETOH_MOLECULAR = #{etohMolecular,jdbcType=DOUBLE},
      ETOH_DENOMINATOR = #{etohDenominator,jdbcType=DOUBLE},
      ETOH_RATE = #{etohRate,jdbcType=DOUBLE},
      CH4_MOLECULAR = #{ch4Molecular,jdbcType=DOUBLE},
      CH4_DENOMINATOR = #{ch4Denominator,jdbcType=DOUBLE},
      CH4_RATE = #{ch4Rate,jdbcType=DOUBLE},
      MEOH_MOLECULAR = #{meohMolecular,jdbcType=DOUBLE},
      MEOH_DENOMINATOR = #{meohDenominator,jdbcType=DOUBLE},
      MEOH_RATE = #{meohRate,jdbcType=DOUBLE},
      ETHA_MOLECULAR = #{ethaMolecular,jdbcType=DOUBLE},
      ETHA_DENOMINATOR = #{ethaDenominator,jdbcType=DOUBLE},
      ETHA_RATE = #{ethaRate,jdbcType=DOUBLE},
      PAR_MOLECULAR = #{parMolecular,jdbcType=DOUBLE},
      PAR_DENOMINATOR = #{parDenominator,jdbcType=DOUBLE},
      PAR_RATE = #{parRate,jdbcType=DOUBLE},
      ETH_MOLECULAR = #{ethMolecular,jdbcType=DOUBLE},
      ETH_DENOMINATOR = #{ethDenominator,jdbcType=DOUBLE},
      ETH_RATE = #{ethRate,jdbcType=DOUBLE},
      OLE_MOLECULAR = #{oleMolecular,jdbcType=DOUBLE},
      OLE_DENOMINATOR = #{oleDenominator,jdbcType=DOUBLE},
      OLE_RATE = #{oleRate,jdbcType=DOUBLE},
      IOLE_MOLECULAR = #{ioleMolecular,jdbcType=DOUBLE},
      IOLE_DENOMINATOR = #{ioleDenominator,jdbcType=DOUBLE},
      IOLE_RATE = #{ioleRate,jdbcType=DOUBLE},
      ISOP_MOLECULAR = #{isopMolecular,jdbcType=DOUBLE},
      ISOP_DENOMINATOR = #{isopDenominator,jdbcType=DOUBLE},
      ISOP_RATE = #{isopRate,jdbcType=DOUBLE},
      TERP_MOLECULAR = #{terpMolecular,jdbcType=DOUBLE},
      TERP_DENOMINATOR = #{terpDenominator,jdbcType=DOUBLE},
      TERP_RATE = #{terpRate,jdbcType=DOUBLE},
      TOL_MOLECULAR = #{tolMolecular,jdbcType=DOUBLE},
      TOL_DENOMINATOR = #{tolDenominator,jdbcType=DOUBLE},
      TOL_RATE = #{tolRate,jdbcType=DOUBLE},
      XYL_MOLECULAR = #{xylMolecular,jdbcType=DOUBLE},
      XYL_DENOMINATOR = #{xylDenominator,jdbcType=DOUBLE},
      XYL_RATE = #{xylRate,jdbcType=DOUBLE}
    where VOC_ID = #{vocId,jdbcType=INTEGER}
  </update>
</mapper>