<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nankai.xining.repository.ExsproductMapper">
  <resultMap id="BaseResultMap" type="com.nankai.xining.bean.Exsproduct">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="NK_NO" jdbcType="INTEGER" property="nkNo" />
    <result column="TYPE" jdbcType="CHAR" property="type" />
    <result column="NAME" jdbcType="CHAR" property="name" />
    <result column="TECH" jdbcType="CHAR" property="tech" />
    <result column="UNIT" jdbcType="CHAR" property="unit" />
    <result column="OUTPUT" jdbcType="DOUBLE" property="output" />
    <result column="EXS_ID" jdbcType="INTEGER" property="exsId" />
    <result column="SCCCODE" jdbcType="CHAR" property="scccode" />
    <result column="PM10" jdbcType="DOUBLE" property="pm10" />
    <result column="PM25" jdbcType="DOUBLE" property="pm25" />
    <result column="CO" jdbcType="DOUBLE" property="co" />
    <result column="VOC" jdbcType="DOUBLE" property="voc" />
    <result column="PM" jdbcType="DOUBLE" property="pm" />
    <result column="SO2" jdbcType="DOUBLE" property="so2" />
    <result column="NOX" jdbcType="DOUBLE" property="nox" />
    <result column="BC" jdbcType="DOUBLE" property="bc" />
    <result column="OC" jdbcType="DOUBLE" property="oc" />
    <result column="EXF_UNIT" jdbcType="VARCHAR" property="exfUnit" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, NK_NO, TYPE, NAME, TECH, UNIT, OUTPUT, EXS_ID, SCCCODE, PM10, PM25, CO, VOC, 
    PM, SO2, NOX, BC, OC, EXF_UNIT
  </sql>
  <select id="selectByExample" parameterType="com.nankai.xining.bean.ExsproductExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exsproduct
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exsproduct
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exsproduct
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.nankai.xining.bean.ExsproductExample">
    delete from exsproduct
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nankai.xining.bean.Exsproduct">
    insert into exsproduct (ID, NK_NO, TYPE, 
      NAME, TECH, UNIT, OUTPUT, 
      EXS_ID, SCCCODE, PM10, PM25, 
      CO, VOC, PM, SO2, 
      NOX, BC, OC, EXF_UNIT
      )
    values (#{id,jdbcType=INTEGER}, #{nkNo,jdbcType=INTEGER}, #{type,jdbcType=CHAR}, 
      #{name,jdbcType=CHAR}, #{tech,jdbcType=CHAR}, #{unit,jdbcType=CHAR}, #{output,jdbcType=DOUBLE}, 
      #{exsId,jdbcType=INTEGER}, #{scccode,jdbcType=CHAR}, #{pm10,jdbcType=DOUBLE}, #{pm25,jdbcType=DOUBLE}, 
      #{co,jdbcType=DOUBLE}, #{voc,jdbcType=DOUBLE}, #{pm,jdbcType=DOUBLE}, #{so2,jdbcType=DOUBLE}, 
      #{nox,jdbcType=DOUBLE}, #{bc,jdbcType=DOUBLE}, #{oc,jdbcType=DOUBLE}, #{exfUnit,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nankai.xining.bean.Exsproduct">
    insert into exsproduct
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="nkNo != null">
        NK_NO,
      </if>
      <if test="type != null">
        TYPE,
      </if>
      <if test="name != null">
        NAME,
      </if>
      <if test="tech != null">
        TECH,
      </if>
      <if test="unit != null">
        UNIT,
      </if>
      <if test="output != null">
        OUTPUT,
      </if>
      <if test="exsId != null">
        EXS_ID,
      </if>
      <if test="scccode != null">
        SCCCODE,
      </if>
      <if test="pm10 != null">
        PM10,
      </if>
      <if test="pm25 != null">
        PM25,
      </if>
      <if test="co != null">
        CO,
      </if>
      <if test="voc != null">
        VOC,
      </if>
      <if test="pm != null">
        PM,
      </if>
      <if test="so2 != null">
        SO2,
      </if>
      <if test="nox != null">
        NOX,
      </if>
      <if test="bc != null">
        BC,
      </if>
      <if test="oc != null">
        OC,
      </if>
      <if test="exfUnit != null">
        EXF_UNIT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="nkNo != null">
        #{nkNo,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=CHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=CHAR},
      </if>
      <if test="tech != null">
        #{tech,jdbcType=CHAR},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=CHAR},
      </if>
      <if test="output != null">
        #{output,jdbcType=DOUBLE},
      </if>
      <if test="exsId != null">
        #{exsId,jdbcType=INTEGER},
      </if>
      <if test="scccode != null">
        #{scccode,jdbcType=CHAR},
      </if>
      <if test="pm10 != null">
        #{pm10,jdbcType=DOUBLE},
      </if>
      <if test="pm25 != null">
        #{pm25,jdbcType=DOUBLE},
      </if>
      <if test="co != null">
        #{co,jdbcType=DOUBLE},
      </if>
      <if test="voc != null">
        #{voc,jdbcType=DOUBLE},
      </if>
      <if test="pm != null">
        #{pm,jdbcType=DOUBLE},
      </if>
      <if test="so2 != null">
        #{so2,jdbcType=DOUBLE},
      </if>
      <if test="nox != null">
        #{nox,jdbcType=DOUBLE},
      </if>
      <if test="bc != null">
        #{bc,jdbcType=DOUBLE},
      </if>
      <if test="oc != null">
        #{oc,jdbcType=DOUBLE},
      </if>
      <if test="exfUnit != null">
        #{exfUnit,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nankai.xining.bean.ExsproductExample" resultType="java.lang.Long">
    select count(*) from exsproduct
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exsproduct
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.nkNo != null">
        NK_NO = #{record.nkNo,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        TYPE = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.name != null">
        NAME = #{record.name,jdbcType=CHAR},
      </if>
      <if test="record.tech != null">
        TECH = #{record.tech,jdbcType=CHAR},
      </if>
      <if test="record.unit != null">
        UNIT = #{record.unit,jdbcType=CHAR},
      </if>
      <if test="record.output != null">
        OUTPUT = #{record.output,jdbcType=DOUBLE},
      </if>
      <if test="record.exsId != null">
        EXS_ID = #{record.exsId,jdbcType=INTEGER},
      </if>
      <if test="record.scccode != null">
        SCCCODE = #{record.scccode,jdbcType=CHAR},
      </if>
      <if test="record.pm10 != null">
        PM10 = #{record.pm10,jdbcType=DOUBLE},
      </if>
      <if test="record.pm25 != null">
        PM25 = #{record.pm25,jdbcType=DOUBLE},
      </if>
      <if test="record.co != null">
        CO = #{record.co,jdbcType=DOUBLE},
      </if>
      <if test="record.voc != null">
        VOC = #{record.voc,jdbcType=DOUBLE},
      </if>
      <if test="record.pm != null">
        PM = #{record.pm,jdbcType=DOUBLE},
      </if>
      <if test="record.so2 != null">
        SO2 = #{record.so2,jdbcType=DOUBLE},
      </if>
      <if test="record.nox != null">
        NOX = #{record.nox,jdbcType=DOUBLE},
      </if>
      <if test="record.bc != null">
        BC = #{record.bc,jdbcType=DOUBLE},
      </if>
      <if test="record.oc != null">
        OC = #{record.oc,jdbcType=DOUBLE},
      </if>
      <if test="record.exfUnit != null">
        EXF_UNIT = #{record.exfUnit,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exsproduct
    set ID = #{record.id,jdbcType=INTEGER},
      NK_NO = #{record.nkNo,jdbcType=INTEGER},
      TYPE = #{record.type,jdbcType=CHAR},
      NAME = #{record.name,jdbcType=CHAR},
      TECH = #{record.tech,jdbcType=CHAR},
      UNIT = #{record.unit,jdbcType=CHAR},
      OUTPUT = #{record.output,jdbcType=DOUBLE},
      EXS_ID = #{record.exsId,jdbcType=INTEGER},
      SCCCODE = #{record.scccode,jdbcType=CHAR},
      PM10 = #{record.pm10,jdbcType=DOUBLE},
      PM25 = #{record.pm25,jdbcType=DOUBLE},
      CO = #{record.co,jdbcType=DOUBLE},
      VOC = #{record.voc,jdbcType=DOUBLE},
      PM = #{record.pm,jdbcType=DOUBLE},
      SO2 = #{record.so2,jdbcType=DOUBLE},
      NOX = #{record.nox,jdbcType=DOUBLE},
      BC = #{record.bc,jdbcType=DOUBLE},
      OC = #{record.oc,jdbcType=DOUBLE},
      EXF_UNIT = #{record.exfUnit,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nankai.xining.bean.Exsproduct">
    update exsproduct
    <set>
      <if test="nkNo != null">
        NK_NO = #{nkNo,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        TYPE = #{type,jdbcType=CHAR},
      </if>
      <if test="name != null">
        NAME = #{name,jdbcType=CHAR},
      </if>
      <if test="tech != null">
        TECH = #{tech,jdbcType=CHAR},
      </if>
      <if test="unit != null">
        UNIT = #{unit,jdbcType=CHAR},
      </if>
      <if test="output != null">
        OUTPUT = #{output,jdbcType=DOUBLE},
      </if>
      <if test="exsId != null">
        EXS_ID = #{exsId,jdbcType=INTEGER},
      </if>
      <if test="scccode != null">
        SCCCODE = #{scccode,jdbcType=CHAR},
      </if>
      <if test="pm10 != null">
        PM10 = #{pm10,jdbcType=DOUBLE},
      </if>
      <if test="pm25 != null">
        PM25 = #{pm25,jdbcType=DOUBLE},
      </if>
      <if test="co != null">
        CO = #{co,jdbcType=DOUBLE},
      </if>
      <if test="voc != null">
        VOC = #{voc,jdbcType=DOUBLE},
      </if>
      <if test="pm != null">
        PM = #{pm,jdbcType=DOUBLE},
      </if>
      <if test="so2 != null">
        SO2 = #{so2,jdbcType=DOUBLE},
      </if>
      <if test="nox != null">
        NOX = #{nox,jdbcType=DOUBLE},
      </if>
      <if test="bc != null">
        BC = #{bc,jdbcType=DOUBLE},
      </if>
      <if test="oc != null">
        OC = #{oc,jdbcType=DOUBLE},
      </if>
      <if test="exfUnit != null">
        EXF_UNIT = #{exfUnit,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nankai.xining.bean.Exsproduct">
    update exsproduct
    set NK_NO = #{nkNo,jdbcType=INTEGER},
      TYPE = #{type,jdbcType=CHAR},
      NAME = #{name,jdbcType=CHAR},
      TECH = #{tech,jdbcType=CHAR},
      UNIT = #{unit,jdbcType=CHAR},
      OUTPUT = #{output,jdbcType=DOUBLE},
      EXS_ID = #{exsId,jdbcType=INTEGER},
      SCCCODE = #{scccode,jdbcType=CHAR},
      PM10 = #{pm10,jdbcType=DOUBLE},
      PM25 = #{pm25,jdbcType=DOUBLE},
      CO = #{co,jdbcType=DOUBLE},
      VOC = #{voc,jdbcType=DOUBLE},
      PM = #{pm,jdbcType=DOUBLE},
      SO2 = #{so2,jdbcType=DOUBLE},
      NOX = #{nox,jdbcType=DOUBLE},
      BC = #{bc,jdbcType=DOUBLE},
      OC = #{oc,jdbcType=DOUBLE},
      EXF_UNIT = #{exfUnit,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>